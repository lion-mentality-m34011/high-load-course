package ru.quipy.common.utils

import java.util.concurrent.locks.ReentrantLock
import java.util.concurrent.locks.Condition
import java.util.LinkedList

class FuckingSemaphore(private val maxPermits: Int, private val maxQueueSize: Int) {
    private val lock = ReentrantLock()
    private val condition: Condition = lock.newCondition()
    private var permits = maxPermits
    private val waitQueue = LinkedList<Thread>()

    fun acquire(): Boolean {
        lock.lock()
        try {
            if (waitQueue.size >= maxQueueSize) {
                println("‚ùå –û—á–µ—Ä–µ–¥—å –∑–∞–±–∏—Ç–∞ –Ω–∞—Ö—É–π! –ü–æ—Ç–æ–∫ ${Thread.currentThread().id} –∏–¥—ë—Ç –≤ –∂–æ–ø—É!")
                return false
            }
            val currentThread = Thread.currentThread()
            waitQueue.add(currentThread)

            while (permits == 0 || waitQueue.peek() != currentThread) {
                condition.await()
            }

            waitQueue.poll()
            permits--
            println("üî• –ü–æ—Ç–æ–∫ ${currentThread.id} –∑–∞—à—ë–ª –≤ –µ–±—É—á–∏–π —Å–µ–º–∞—Ñ–æ—Ä!")
            return true
        } finally {
            lock.unlock()
        }
    }

    fun release() {
        lock.lock()
        try {
            permits++
            println("üí® –ü–æ—Ç–æ–∫ ${Thread.currentThread().id} –≤—ã—à–µ–ª –∏–∑ —ë–±–∞–Ω–æ–≥–æ —Å–µ–º–∞—Ñ–æ—Ä–∞!")
            condition.signalAll()
        } finally {
            lock.unlock()
        }
    }
}
